//variables for tft screen
#include <TFT_eSPI.h>
TFT_eSPI tft = TFT_eSPI();
#define BLACK 0x0000
#define BLUE 0x001F
#define RED 0xF800
#define GREEN 0x07E0
#define CYAN 0x07FF
#define MAGENTA 0xF81F
#define YELLOW 0xFFE0
#define WHITE 0xFFFF
float width = tft.width();
float height = tft.height();

//variables for countdown timer
#include LiquidCrystal.h

bool countdown = true;
int countdownTime = 15;
int buzzerpin = 28;

//variables for decodePuzzle

//variables for lightPuzzle
#include <Keypad.h>

const byte ROWS = 4;
const byte COLS = 4;
char keys[ROWS][COLS] = {
  {'1', '2', '3', 'A'},
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', 'D'}
};
byte rowPins[ROWS] = {9, 8, 7, 6};
byte colPins[COLS] = {5, 4, 3, 2};
Keypad keypad = Keypad(makeKeymap(keys), rowPins, colPins, ROWS, COLS);

const int ledPin1 = 10;
const int ledPin2 = 11;
const int ledPin3 = 12;
const int ledPin4 = 13;
const int ledPin5 = A1;
const int ledPin6 = A2;
const int ledPin7 = A3;
const int ledPin8 = A4;
const int ledPin9 = A5;
const int ledPin10 = A6;

const int ledPins[] = {ledPin1, ledPin2, ledPin3, ledPin4, ledPin5, ledPin6, ledPin7, ledPin8};
const int numLeds = sizeof(ledPins) / sizeof(ledPins[0]);
randomSeed(analogRead(0));

//variables for arrowPuzzle
bool selectColour = true;
bool selectSerialNumber = true;
bool wireGen = true;
bool randomNumGenerate = true;
bool UPdownPuzzleSolve = false;
int randomNumber;
int arrowCode[6]; //UP == 1, DOWN == 2, LEFT == 3, RIGHT == 4
int arrowCodeEnter[6];
int arrowCodeIndex = 0;
int numWires;
int buttonPin = 38;     // the number of the button pin
int buttonPin2 = 39;
int buttonPin3 = 40;
int buttonPin4 = 41;
int buttonState = 0;   // current state of the button
int buttonState2 = 0;
int buttonState3 = 0;
int buttonState4 = 0;
int lastButtonState = 0;  // previous state of the button
int lastButtonState2 = 0;
int lastButtonState3 = 0;
int lastButtonState4 = 0;

//variables for joystick

//variables for switching screens and such
bool startScreen = true;
bool gameScreen = false;
bool badEndScreen = false;
bool goodEndScreen = false;

//////////////////////////////////////
//setup
void setup(){
  // lcd setup
  lcd.begin(16, 2);
  pinMode(buzzerpin, OUTPUT);
  
  //pins for buttons
  pinMode(buttonPin, INPUT);
  pinMode(buttonPin2, INPUT);
  pinMode(buttonPin3, INPUT);
  pinMode(buttonPin4, INPUT);
  
  //pins for tft screen
  
  //pins for lcd display
  
  //pins for LEDS
  Serial.begin(9600);

  // Set up LED pins as outputs
  for (int i = 0; i < numLeds; i++) {
    pinMode(ledPins[i], OUTPUT);
  }
  
  //pins for buzzers
  
  //pins for joystick
  
  
}//end setup

//////////////////////////////////////
//loop
void loop(){

}//end loop

//////////////////////////////////////
//startscreen
void startScreen(){
   tft.fillScreen(BLACK);
  
  //Easy button
  tft.drawRoundRect(width/2.5, 100, width/1.5, height/8, 5, WHITE);
  tft.setCursor(width/1.6, 115);
  tft.setTextColor(RED);
  tft.setTextSize(3);
  tft.println("Easy");

  //Medium button
  tft.drawRoundRect(width/2.5, 170, width/1.5, height/8, 5, WHITE);
  tft.setCursor(width/1.75, 185);
  tft.setTextColor(RED);
  tft.setTextSize(3);
  tft.println("Medium");

  //Hard button
  tft.drawRoundRect(width/2.5, 240, width/1.5, height/8, 5, WHITE);
  tft.setCursor(width/1.6, 260);
  tft.setTextColor(RED);
  tft.setTextSize(3);
  tft.println("Hard");

  tft.setCursor(width/15, height/16);
  tft.setTextColor(BLACK, RED);
  tft.setTextSize(10);
  tft.println("NOT A BOMB");
}//endstartscreen

//////////////////////////////////////
//gameScreen
void gameScreen(){
  numWires = random(0,4);
  int wireXPos = 20;
  for(int i = 0; i < numWires; i++){
    tft.fillRect(wireXPos, 30, 15, 50, BLUE);
    wireXPos += 25;
  }//end for
}//end gamescreen

//////////////////////////////////////
//badEndScreen
void badEndScreen(){

}//end badEndScreen

//////////////////////////////////////
//good end screen
void goodEndScreen(){

}//end goodEndScreen

//////////////////////////////////////
//decodePuzzle
void decodePuzzle(){

}//end decode

//////////////////////////////////////
//lightPuzzle
void lightPuzzle(){
// Turn on a random number of LEDs
  int numLedsOn = random(0,9);
  for (int i = 0; i < numLeds; i++) {
    digitalWrite(ledPins[i], i < numLedsOn);
  }
  
  // Wait for 5 seconds
  delay(5000);
  
  // Turn off all LEDs
  for (int i = 0; i < numLeds; i++) {
    digitalWrite(ledPins[i], LOW);
  }

  // Wait for user input
  String code = "";
  while (true) {
    char key = keypad.getKey();
    if (key == '#') {
      break;
    } else if (key == '*') {
      code = "";
    } else if (key) {
      code += key;
    }
  }

  // Check code based on number of LEDs on
  String expectedCode;
  switch (numLedsOn) {
    case 3:
      expectedCode = "A19";
      break;
    case 4:
      expectedCode = "B67";
      break;
    case 5:
      expectedCode = "C03";
      break;
    case 6:
      expectedCode = "D42";
      break;
    case 7:
      expectedCode = "A32";
      break;
    case 8:
      expectedCode = "B44";
      break;
    default:
      expectedCode = "200";
  }
  
  // Check user input
  if (code == expectedCode) {
    Serial.println("Code correct!");
  } else {
    Serial.println("Code incorrect.");
  }
}//endlightPuzzle

//////////////////////////////////////
//arrowPuzzle
void arrowPuzzle(){
//code for selecting the button colour
  if(selectColour){
    randomNumber = random(0,6);//selects a random number and depending on the one chosen, a colour for the
                               //button is selected.
    
    Serial.print("Random Number: ");
    Serial.print(randomNumber);
    Serial.println();

    //if statement that creates the button and generates the corresponding code
    if(randomNumber == 0){
      //tft.fillCircle(100, 20, 30, RED);
      //tft.setCursor(125, 30);
      //tft.setTextColor(BLACK);
      //tft.setTextSize(3);
      //tft.print("BOMB");
      arrowCode[0] = 3;
      arrowCode[1] = 4;
    } else if (randomNumber == 1){
      //tft.fillCircle(100, 20, 10, YELLOW);
      //tft.setCursor(125, 30);
      //tft.setTextColor(BLACK);
      //tft.setTextSize(3);
      //tft.print("BOMB");
      arrowCode[0] = 1;
      arrowCode[1] = 2;
    } else if (randomNumber == 2){
      //tft.fillCircle(100, 20, 10, BLUE);
      //tft.setCursor(125, 30);
      //tft.setTextColor(BLACK);
      //tft.setTextSize(3);
      //tft.print("BOMB");
      arrowCode[0] = 4;
      arrowCode[1] = 3;
    } else if (randomNumber == 3){
      //tft.fillCircle(100, 20, 10, GREEN);
      //tft.setCursor(125, 30);
      //tft.setTextColor(BLACK);
      //tft.setTextSize(3);
      //tft.print("BOMB");
      arrowCode[0] = 2;
      arrowCode[1] = 1;
    } else if (randomNumber == 4){
      //tft.fillCircle(100, 20, 10, BLACK);
      //tft.setCursor(125, 30);
      //tft.setTextColor(WHITE);
      //tft.setTextSize(3);
      //tft.print("BOMB");
      arrowCode[0] = 2;
      arrowCode[1] = 3;
    } else {
      //tft.fillCircle(100, 20, 10, WHITE);
      //tft.setCursor(125, 30);
      //tft.setTextColor(BLACK);
      //tft.setTextSize(3);
      //tft.print("BOMB");
      arrowCode[0] = 1;
      arrowCode[1] = 4;
    }

    selectColour = false;
  }//end select colour loop

  //Generating number of wires
  if(wireGen){
    //This generates the number of wires and prints them to the tft screen
    numWires = random(0,4);
    //int wireXPos = 20;
    //for(int i = 0; i < numWires; i++){
     // tft.fillRect(wireXPos, 30, 15, 50, BLUE);
     // wireXPos += 25;
    //}//end for
    Serial.print("Number of wires: ");
    Serial.print(numWires);
    //This generates the code the user needs to solve depending on the number of wires
    if (numWires == 0){
      arrowCode[2] = 4;
      arrowCode[3] = 3;
      arrowCode[4] = 1;
    } else if (numWires == 1){
      arrowCode[2] = 3;
      arrowCode[3] = 3;
      arrowCode[4] = 1;
    } else if (numWires == 2){
      arrowCode[2] = 4;
      arrowCode[3] = 3;
      arrowCode[4] = 2;
    } else if (numWires == 3){
      arrowCode[2] = 1;
      arrowCode[3] = 1;
      arrowCode[4] = 2;
    }//end if else statement
  
    wireGen = false;
  }//end wireGen

  //This is the serial number puzzle solving corresponder thing
  for(int i = 0; i < sizeof(serialNumber); i++){
    if (serialNumber[i] == 0){
      arrowCode[5] = 3;
      break;
    } else if (serialNumber[i] == 3){
      arrowCode[5] = 2;
      break;
    } else if (serialNumber[i] == 6){
      arrowCode[5] = 1;
      break;      
    } else if (i == (sizeof(serialNumber))-1){
      arrowCode[5] = 4;
    }
  }//end serial number

  //This is where the user presses the corresponding buttons to solve the puzzle
  if (arrowCodeIndex < 6){
    buttonState = digitalRead(buttonPin);  // read the state of the button
    if (buttonState != lastButtonState) {  // check if button state has changed
      delay(50);  // debounce delay to filter out button noise
      if (buttonState == LOW) {   // check if button is pressed
        // do something when button is pressed
      }
      else {  // button is released
        // do something when button is released
        Serial.println("UP"); // print statement to serial monitor
        arrowCodeEnter[arrowCodeIndex] = 1;
        arrowCodeIndex += 1;
      }
      lastButtonState = buttonState;  // store the current button state as the last state
    }

    buttonState2 = digitalRead(buttonPin2);
    if (buttonState2 != lastButtonState2){
      delay(50);
      if (buttonState2 == LOW){

      } else {
        Serial.println("DOWN");
        arrowCodeEnter[arrowCodeIndex] = 2;
        arrowCodeIndex += 1;
      }
      lastButtonState2 = buttonState2;
    }

    buttonState3 = digitalRead(buttonPin3);
    if (buttonState3 != lastButtonState3){
      delay(50);
      if (buttonState3 == LOW){

      } else {
        Serial.println("LEFT");
        arrowCodeEnter[arrowCodeIndex] = 3;
        arrowCodeIndex += 1;
      }
      lastButtonState3 = buttonState3;
    }

    buttonState4 = digitalRead(buttonPin4);
    if (buttonState4 != lastButtonState4){
      delay(50);
      if (buttonState4 == LOW){

      } else {
        Serial.println("RIGHT");
        arrowCodeEnter[arrowCodeIndex] = 4;
        arrowCodeIndex += 1;
      }
      lastButtonState4 = buttonState4;
    }
  }//to enter the code

  if(arrowCodeIndex == 6){
    for(int i = 0; i < sizeof(arrowCode); i++){
      if(arrowCode[i] != arrowCodeEnter[i]){
        wipeArrowCodeEnter();
        break;
      } else if (i == sizeof(arrowCode)-1){
        UPdownPuzzleSolve = true;
        Serial.println("You solved the puzzle!");
      }//end else if
    }//end for
  }//end if
}//endArrowPuzzle

//////////////////////////////////////
//wipe arrowCodeEnter
void wipeArrowCodeEnter(){
  for(int i = 0; i < sizeof(arrowCodeEnter); i++){
    arrowCodeEnter[i] = 0;
  }
  arrowCodeIndex = 0;
}//end wipeArrowCodeEnter
