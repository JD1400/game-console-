//variables for tft screen

//variables for countdown timer
#include LiquidCrystal.h

bool countdown = true;
int countdownTime = 15;
int buzzerpin = 28;

//variables for decodePuzzle

//variables for lightPuzzle

//variables for arrowPuzzle
int buttonState = 0;   // current state of the button
int buttonState2 = 0;
int buttonState3 = 0;
int buttonState4 = 0;
int lastButtonState = 0;  // previous state of the button
int lastButtonState2 = 0;
int lastButtonState3 = 0;
int lastButtonState4 = 0;

//variables for joystick

//variables for switching screens and such
bool startScreen = true;
bool gameScreen = false;
bool badEndScreen = false;
bool goodEndScreen = false;

//////////////////////////////////////
//setup
void setup(){
  // lcd setup
  lcd.begin(16, 2);
  pinMode(buzzerpin, OUTPUT);
  
  //pins for buttons
  pinMode(38, INPUT);
  pinMode(39, INPUT);
  pinMode(40, INPUT);
  pinMode(41, INPUT);
  
  //pins for tft screen
  
  //pins for lcd display
  
  //pins for LEDS
  
  //pins for buzzers
  
  //pins for joystick
  
  
}//end setup

//////////////////////////////////////
//loop
void loop(){

}//end loop

//////////////////////////////////////
//startscreen
void startScreen(){

}//endstartscreen

//////////////////////////////////////
//gameScreen
void gameScreen(){

}//end gamescreen

//////////////////////////////////////
//badEndScreen
void badEndScreen(){

}//end badEndScreen

//////////////////////////////////////
//good end screen
void goodEndScreen(){

}//end goodEndScreen

//////////////////////////////////////
//decodePuzzle
void decodePuzzle(){

}//end decode

//////////////////////////////////////
//lightPuzzle
void lightPuzzle(){

}//endlightPuzzle

//////////////////////////////////////
//arrowPuzzle
void arrowPuzzle(){
//code for selecting the button colour
  if(selectColour){
    randomNumber = random(0,6);//selects a random number and depending on the one chosen, a colour for the
                               //button is selected.
    
    Serial.print("Random Number: ");
    Serial.print(randomNumber);
    Serial.println();

    //if statement that creates the button and generates the corresponding code
    if(randomNumber == 0){
      //tft.fillCircle(100, 20, 30, RED);
      //tft.setCursor(125, 30);
      //tft.setTextColor(BLACK);
      //tft.setTextSize(3);
      //tft.print("BOMB");
      arrowCode[0] = 3;
      arrowCode[1] = 4;
    } else if (randomNumber == 1){
      //tft.fillCircle(100, 20, 10, YELLOW);
      //tft.setCursor(125, 30);
      //tft.setTextColor(BLACK);
      //tft.setTextSize(3);
      //tft.print("BOMB");
      arrowCode[0] = 1;
      arrowCode[1] = 2;
    } else if (randomNumber == 2){
      //tft.fillCircle(100, 20, 10, BLUE);
      //tft.setCursor(125, 30);
      //tft.setTextColor(BLACK);
      //tft.setTextSize(3);
      //tft.print("BOMB");
      arrowCode[0] = 4;
      arrowCode[1] = 3;
    } else if (randomNumber == 3){
      //tft.fillCircle(100, 20, 10, GREEN);
      //tft.setCursor(125, 30);
      //tft.setTextColor(BLACK);
      //tft.setTextSize(3);
      //tft.print("BOMB");
      arrowCode[0] = 2;
      arrowCode[1] = 1;
    } else if (randomNumber == 4){
      //tft.fillCircle(100, 20, 10, BLACK);
      //tft.setCursor(125, 30);
      //tft.setTextColor(WHITE);
      //tft.setTextSize(3);
      //tft.print("BOMB");
      arrowCode[0] = 2;
      arrowCode[1] = 3;
    } else {
      //tft.fillCircle(100, 20, 10, WHITE);
      //tft.setCursor(125, 30);
      //tft.setTextColor(BLACK);
      //tft.setTextSize(3);
      //tft.print("BOMB");
      arrowCode[0] = 1;
      arrowCode[1] = 4;
    }

    selectColour = false;
  }//end select colour loop

  //Generating number of wires
  if(wireGen){
    //This generates the number of wires and prints them to the tft screen
    numWires = random(0,4);
    //int wireXPos = 20;
    //for(int i = 0; i < numWires; i++){
     // tft.fillRect(wireXPos, 30, 15, 50, BLUE);
     // wireXPos += 25;
    //}//end for
    Serial.print("Number of wires: ");
    Serial.print(numWires);
    //This generates the code the user needs to solve depending on the number of wires
    if (numWires == 0){
      arrowCode[2] = 4;
      arrowCode[3] = 3;
      arrowCode[4] = 1;
    } else if (numWires == 1){
      arrowCode[2] = 3;
      arrowCode[3] = 3;
      arrowCode[4] = 1;
    } else if (numWires == 2){
      arrowCode[2] = 4;
      arrowCode[3] = 3;
      arrowCode[4] = 2;
    } else if (numWires == 3){
      arrowCode[2] = 1;
      arrowCode[3] = 1;
      arrowCode[4] = 2;
    }//end if else statement
  
    wireGen = false;
  }//end wireGen

  //This is the serial number puzzle solving corresponder thing
  for(int i = 0; i < sizeof(serialNumber); i++){
    if (serialNumber[i] == 0){
      arrowCode[5] = 3;
      break;
    } else if (serialNumber[i] == 3){
      arrowCode[5] = 2;
      break;
    } else if (serialNumber[i] == 6){
      arrowCode[5] = 1;
      break;      
    } else if (i == (sizeof(serialNumber))-1){
      arrowCode[5] = 4;
    }
  }//end serial number

  //This is where the user presses the corresponding buttons to solve the puzzle
  if (arrowCodeIndex < 6){
    buttonState = digitalRead(buttonPin);  // read the state of the button
    if (buttonState != lastButtonState) {  // check if button state has changed
      delay(50);  // debounce delay to filter out button noise
      if (buttonState == LOW) {   // check if button is pressed
        // do something when button is pressed
      }
      else {  // button is released
        // do something when button is released
        Serial.println("UP"); // print statement to serial monitor
        arrowCodeEnter[arrowCodeIndex] = 1;
        arrowCodeIndex += 1;
      }
      lastButtonState = buttonState;  // store the current button state as the last state
    }

    buttonState2 = digitalRead(buttonPin2);
    if (buttonState2 != lastButtonState2){
      delay(50);
      if (buttonState2 == LOW){

      } else {
        Serial.println("DOWN");
        arrowCodeEnter[arrowCodeIndex] = 2;
        arrowCodeIndex += 1;
      }
      lastButtonState2 = buttonState2;
    }

    buttonState3 = digitalRead(buttonPin3);
    if (buttonState3 != lastButtonState3){
      delay(50);
      if (buttonState3 == LOW){

      } else {
        Serial.println("LEFT");
        arrowCodeEnter[arrowCodeIndex] = 3;
        arrowCodeIndex += 1;
      }
      lastButtonState3 = buttonState3;
    }

    buttonState4 = digitalRead(buttonPin4);
    if (buttonState4 != lastButtonState4){
      delay(50);
      if (buttonState4 == LOW){

      } else {
        Serial.println("RIGHT");
        arrowCodeEnter[arrowCodeIndex] = 4;
        arrowCodeIndex += 1;
      }
      lastButtonState4 = buttonState4;
    }
  }//to enter the code

  if(arrowCodeIndex == 6){
    for(int i = 0; i < sizeof(arrowCode); i++){
      if(arrowCode[i] != arrowCodeEnter[i]){
        wipeArrowCodeEnter();
        break;
      } else if (i == sizeof(arrowCode)-1){
        UPdownPuzzleSolve = true;
        Serial.println("You solved the puzzle!");
      }//end else if
    }//end for
  }//end if
}//endArrowPuzzle

//////////////////////////////////////
//wipe arrowCodeEnter
void wipeArrowCodeEnter(){
  for(int i = 0; i < sizeof(arrowCodeEnter); i++){
    arrowCodeEnter[i] = 0;
  }
  arrowCodeIndex = 0;
}//end wipeArrowCodeEnter
